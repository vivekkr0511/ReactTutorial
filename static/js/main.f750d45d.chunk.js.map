{"version":3,"sources":["logo.svg","Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","person","props","onClick","click","name","age","key","value","onChange","changed","App","state","persons","ID","isflag","onChangedHandler","event","id","personIndex","findIndex","p","person11","target","newPerson","setState","togglePersonHandler","deletePersonHandler","index","per","splice","this","map","pp","Person","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,mJCgB5BC,G,YAdA,SAACC,GACZ,OACI,6BAEA,uBACAC,QAAWD,EAAME,OAChBF,EAAMG,KAFP,WAEqBH,EAAMI,IAF3B,eAE4CJ,EAAMK,KAGlD,2BAAOC,MAAON,EAAMG,KAAMI,SAAWP,EAAMQ,aCgEpCC,E,2MArEbC,MAAM,CACJC,QAAQ,CACN,CAACR,KAAK,QAASC,IAAK,GAAIQ,GAAG,OAC3B,CAACT,KAAK,SAAUC,IAAK,GAAIQ,GAAG,QAE9BC,QAAO,G,EAGTC,iBAAmB,SAACC,EAAMC,GACxB,IAAMC,EAAc,EAAKP,MAAMC,QAAQO,WAAW,SAAAC,GAChD,OAAOA,EAAEP,KAAOI,KAGZI,EAAQ,eACT,EAAKV,MAAMC,QAAQM,IAExBG,EAASjB,KAAOY,EAAMM,OAAOf,MAE7B,IAAMgB,EAAS,YAAO,EAAKZ,MAAMC,SACjCW,EAAUL,GAAad,KAAOiB,EAASjB,KAEvC,EAAKoB,SAAS,CACZZ,QAAQW,K,EAKZE,oBAAsB,WAEpB,EAAKD,SAAS,CACZV,QAAS,EAAKH,MAAMG,U,EAGxBY,oBAAsB,SAACC,GAErB,IAAMC,EAAG,YAAO,EAAKjB,MAAMC,SAC3BgB,EAAIC,OAAOF,EAAM,GACf,EAAKH,SAAS,CACZZ,QAASgB,K,wEAGN,IAAD,OACF5B,EAAS,KAgBb,OAfG8B,KAAKnB,MAAMG,SACZd,EAEE8B,KAAKnB,MAAMC,QAAQmB,KAAI,SAACC,EAAG1B,GACvB,OAAO,kBAAC2B,EAAD,CACP9B,MAAS,kBAAM,EAAKuB,oBAAoBpB,IACxCF,KAAQ4B,EAAG5B,KACXC,IAAM2B,EAAG3B,IACTC,IAAK0B,EAAGnB,GACRJ,QAAW,SAACO,GAAD,OAAU,EAAKD,iBAAiBC,EAAOgB,EAAGnB,WAO3D,yBAAKqB,UAAU,OACd,gDACClC,EAED,4BACAE,QAAS4B,KAAKL,qBADd,qB,GAhEWU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f750d45d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react';\r\n\r\nconst person = (props) => {\r\n    return (\r\n        <div>\r\n            \r\n        <p \r\n        onClick = {props.click} >         \r\n        {props.name} age is {props.age} and key is {props.key}\r\n        \r\n        </p>\r\n        <input value={props.name} onChange ={props.changed} />\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default person;","import React , { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person'\n\nclass App extends Component{\n  state={\n    persons:[\n      {name:'Vivek', age: 32, ID:\"V01\"},\n      {name:'Prerna', age: 29, ID:\"V02\"}\n    ],\n    isflag:true\n  }\n\n  onChangedHandler = (event,id) =>{\n    const personIndex = this.state.persons.findIndex( p =>{\n      return p.ID === id;\n    })\n    //const personVal = this.state.persons[personIndex];\n    const person11 = {\n      ...this.state.persons[personIndex]\n    };\n    person11.name = event.target.value;\n    //personVal.name = event.target.value;\n    const newPerson = [...this.state.persons];\n    newPerson[personIndex].name = person11.name;\n\n    this.setState({\n      persons:newPerson\n    })\n    \n  }\n\n  togglePersonHandler = () =>{\n    //alert(\"AA\");\n    this.setState({\n      isflag: !this.state.isflag\n    })\n  }\n  deletePersonHandler = (index) =>{\n    //const per = this.state.persons.slice();\n    const per = [...this.state.persons];\n    per.splice(index,1);\n      this.setState({\n        persons: per\n      })\n  }\n  render(){\n    let person = null;\n    if(this.state.isflag){\n      person = (\n        //<div className=\"personDiv\">\n        this.state.persons.map((pp,key) => {\n            return <Person \n            click = {() => this.deletePersonHandler(key)}\n            name = {pp.name} \n            age= {pp.age}\n            key={pp.ID}\n            changed = {(event) =>this.onChangedHandler(event, pp.ID)}\n             />         \n          })\n        ///</div>\n      )\n    }\n    return(\n      <div className=\"App\">\n       <h1>Hello Vivek !!!!</h1>       \n       {person}\n       \n       <button  \n       onClick={this.togglePersonHandler}>Switch Names</button>\n      </div>\n    )\n  }\n}\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}